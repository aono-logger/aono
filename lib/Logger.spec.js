// Generated by CoffeeScript 2.3.0
(function() {
  var Logger, sinon;

  sinon = require("sinon");

  Logger = require("./Logger").default;

  describe("Logger", function() {
    var log, logger0, mocks, testedLogger;
    logger0 = "logger0";
    mocks = {
      timeProvider: sinon.stub(),
      listener: sinon.spy()
    };
    testedLogger = null;
    log = null;
    beforeEach(function() {
      testedLogger = new Logger(mocks.timeProvider, logger0);
      return testedLogger.on("log", mocks.listener);
    });
    afterEach(function() {
      mocks.timeProvider.resetHistory();
      return mocks.listener.resetHistory();
    });
    describe("when after logging without meta", function() {
      var level0, message0, timestamp0;
      timestamp0 = 123456;
      level0 = "level0";
      message0 = "message0";
      beforeEach(function() {
        mocks.timeProvider.returns(timestamp0);
        testedLogger.log(level0, message0);
        return log = (mocks.listener.getCall(0)).args[0];
      });
      it("emits log with proper timestamp", function() {
        return log.timestamp.should.equal(timestamp0);
      });
      it("emits log with proper logger name", function() {
        return log.logger.should.equal(logger0);
      });
      it("emits log with proper level", function() {
        return log.level.should.equal(level0);
      });
      it("emits log with proper message", function() {
        return log.message.should.equal(message0);
      });
      return it("emits log with empty meta", function() {
        return log.meta.should.eql({});
      });
    });
    return describe("when after logging with meta", function() {
      var level1, message1, meta0, timestamp1;
      timestamp1 = 789101112;
      level1 = "level1";
      message1 = "message1";
      meta0 = {
        prop0: "value0"
      };
      beforeEach(function() {
        mocks.timeProvider.returns(timestamp1);
        testedLogger.log(level1, message1, meta0);
        return log = (mocks.listener.getCall(0)).args[0];
      });
      it("emits log with proper timestamp", function() {
        return log.timestamp.should.equal(timestamp1);
      });
      it("emits log with proper logger name", function() {
        return log.logger.should.equal(logger0);
      });
      it("emits log with proper level", function() {
        return log.level.should.equal(level1);
      });
      it("emits log with proper message", function() {
        return log.message.should.equal(message1);
      });
      return it("emits log with proper meta", function() {
        return log.meta.should.eql(meta0);
      });
    });
  });

}).call(this);
